package com.ydm.opengl.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEACHER_INFO_DATA".
*/
public class TeacherInfoDataDao extends AbstractDao<TeacherInfoData, Long> {

    public static final String TABLENAME = "TEACHER_INFO_DATA";

    /**
     * Properties of entity TeacherInfoData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TeacherId = new Property(0, Long.class, "teacherId", true, "_id");
        public final static Property TeacherNumber = new Property(1, String.class, "teacherNumber", false, "TEACHER_NUMBER");
        public final static Property TeacherName = new Property(2, String.class, "teacherName", false, "TEACHER_NAME");
        public final static Property TeacherSex = new Property(3, String.class, "teacherSex", false, "TEACHER_SEX");
    }


    public TeacherInfoDataDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherInfoDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACHER_INFO_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: teacherId
                "\"TEACHER_NUMBER\" TEXT," + // 1: teacherNumber
                "\"TEACHER_NAME\" TEXT," + // 2: teacherName
                "\"TEACHER_SEX\" TEXT);"); // 3: teacherSex
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TEACHER_INFO_DATA_TEACHER_NUMBER ON \"TEACHER_INFO_DATA\"" +
                " (\"TEACHER_NUMBER\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACHER_INFO_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TeacherInfoData entity) {
        stmt.clearBindings();
 
        Long teacherId = entity.getTeacherId();
        if (teacherId != null) {
            stmt.bindLong(1, teacherId);
        }
 
        String teacherNumber = entity.getTeacherNumber();
        if (teacherNumber != null) {
            stmt.bindString(2, teacherNumber);
        }
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(3, teacherName);
        }
 
        String teacherSex = entity.getTeacherSex();
        if (teacherSex != null) {
            stmt.bindString(4, teacherSex);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TeacherInfoData entity) {
        stmt.clearBindings();
 
        Long teacherId = entity.getTeacherId();
        if (teacherId != null) {
            stmt.bindLong(1, teacherId);
        }
 
        String teacherNumber = entity.getTeacherNumber();
        if (teacherNumber != null) {
            stmt.bindString(2, teacherNumber);
        }
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(3, teacherName);
        }
 
        String teacherSex = entity.getTeacherSex();
        if (teacherSex != null) {
            stmt.bindString(4, teacherSex);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TeacherInfoData readEntity(Cursor cursor, int offset) {
        TeacherInfoData entity = new TeacherInfoData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // teacherId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // teacherNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // teacherName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // teacherSex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TeacherInfoData entity, int offset) {
        entity.setTeacherId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTeacherNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTeacherName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTeacherSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TeacherInfoData entity, long rowId) {
        entity.setTeacherId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TeacherInfoData entity) {
        if(entity != null) {
            return entity.getTeacherId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TeacherInfoData entity) {
        return entity.getTeacherId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
